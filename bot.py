import os
import re
from telegram import Update, ReplyKeyboardMarkup, constants
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Render ---
TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('CHAT_ID') 

# --- –§—É–Ω–∫—Ü–∏—è "–û–±–µ–∑–≤—Ä–µ–∂–∏–≤–∞—Ç–µ–ª—å" Markdown (–æ–Ω–∞ –Ω–∞–º –µ—â–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è) ---
def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø /start ---
# –ú—ã –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å parse_mode, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    keyboard = [["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    # –¢–ï–ü–ï–†–¨ –≠–¢–ê –°–¢–†–û–ö–ê –ë–ï–ó–û–ü–ê–°–ù–ê –ò –ù–ï –ë–£–î–ï–¢ –í–´–ó–´–í–ê–¢–¨ –û–®–ò–ë–ö–£
    await update.message.reply_text(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n'
        f'–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–∞–π—Ç–∞ ratio-legis.ru. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup=reply_markup
    )

# --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.effective_user
    
    if user_message == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)":
        response_to_client = '–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n1. –ù–æ–º–µ—Ä –¥–µ–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞.\n2. –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email.'
    elif user_message == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        response_to_client = '–ö–æ–Ω–µ—á–Ω–æ, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    else:
        response_to_client = '–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.'
        
    user_info = f"{user.first_name}"
    if user.last_name:
        user_info += f" {user.last_name}"
    if user.username:
        user_info += f" (@{user.username})"
    
    escaped_user_info = escape_markdown(user_info)
    escaped_user_message = escape_markdown(user_message)
        
    notification_to_admin = (
        f"üì¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\\!* \n\n"
        f"üë§ *–û—Ç:* {escaped_user_info}\n"
        f"‚úâÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n`{escaped_user_message}`"
    )
    
    try:
        if ADMIN_CHAT_ID:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID, 
                text=notification_to_admin,
                parse_mode=constants.ParseMode.MARKDOWN_V2
            )
        else:
            print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            
        await update.message.reply_text(response_to_client)
        
    except Exception as e:
        print(f"!!! –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ !!!")
        print(f"–û—à–∏–±–∫–∞: {e}")
        print(f"–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {notification_to_admin}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ–∑–∂–µ.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
